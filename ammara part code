import random
import copy
import math
import time


class dotsboxes(object):
    
    def __init__(self, rows, columns):
    self.play_dict = {}
        for i in range((rows)):
            for j in range(columns-1):
                self.play_dict[((j+(i*columns)), j+(i*columns)+1)] = 0
        
        #creates the possible vertical plays
        for i in range(rows-1):
            for j in range (columns):
                self.play_dict[(j+(i*columns), j+columns+(i*columns))] = 0
        self.score_dict = {}
        
        for i in range((rows-1)): 
            for j in range(columns-1): 
                box = [(j + i*columns, j+i*columns +1)]
                box.append((box[0][0], box[0][1] + columns - 1))
                box.append((box[0][0] + 1, box[0][1] + columns))
                box.append((box[0][0] + columns, box[2][1]))
                self.score_dict[tuple(box)] = 0
        
      
        self.row_count = rows
        self.column_count = columns
        
        #scorekeeping
        self.a_score = 0
        self.b_score = 0
        
    def render_row(self, i):
       
        left = (i * self.column_count)
        right = left + 1
        for j in range(self.column_count - 1):
            if self.play_dict[(left, right)] == 0:
                print("{:^3d}".format(left), end = "   ") 
            else: 
                print("{:^3d} -".format(left), end = " ")
            left = right
            right = left + 1
        print("{:^3d}".format(left))
        
    def render_vertical(self, upper_left, upper_right):
        if self.play_dict[(upper_left, upper_right)] == 0:
            print("  ", end = " ")
        else:
            print(" |", end = " ")
    
    def render_middle_row(self, i):
        upper_left = (i * self.column_count)
        upper_right = upper_left + 1
        bottom_left = upper_left + self.column_count
        bottom_right = bottom_left + 1
        
        for j in range(self.column_count - 1):
           
            self.render_vertical(upper_left, bottom_left)
       
            top = (upper_left, upper_right)
            left = (upper_left, bottom_left)
            right = (upper_right, bottom_right)
            bottom = (bottom_left, bottom_right)
            score = self.score_dict[(top, left, right, bottom)]
            
            if score == 0:
                print("  ", end = " ")
            else: 
                print(" " + score, end = " ")
            
          
            upper_left, bottom_left = upper_right, bottom_right
            upper_right += 1
            bottom_right += 1
        self.render_vertical(upper_left, bottom_left)
        print()
        
    
    def render(self):
        
        for i in range(self.row_count - 1):
       
            self.render_row(i)
            self.render_middle_row(i)
            
        self.render_row(self.row_count - 1)
        print("\nPlayer A: {} Player B: {}".format(self.a_score, self.b_score))
        
    def check_for_scores(self, player_a):
        
        player = "A" if player_a else "B"
        
       
        taken_set = {i for i in self.play_dict if self.play_dict[i] == 1}
        open_scores = [i for i in self.score_dict if self.score_dict[i] == 0]
        
        score_counter = 0
        
        
        for box in open_scores:
            #if a new score is found:
            if set(box).issubset(taken_set):
                score_counter += 1
                #keeps track of the score in the dict:
                self.score_dict[box] = player
        return(score_counter) #returns the score
                
    
    def make_play(self, start_point, end_point, player_a):
       
        try:
          
            if self.play_dict[(start_point, end_point)] == 1:
                return(False)
        except KeyError:
            return(False)
        
        self.play_dict[(start_point, end_point)] = 1
      
        score = self.check_for_scores(player_a)
        if player_a:
            self.a_score += score
        else:
            self.b_score += score
        return(True)
            
    def get_open_plays(self):
        return([i for i in self.play_dict if self.play_dict[i] == 0])
        
    def isover(self):
    
        return(self.a_score + self.b_score == len(self.score_dict))
        
class random_player(object):
   
    def __init__(self, player_a):
      
        self.player = player_a
        
    def make_play(self, game):
      
        list_of_plays = game.get_open_plays()
        play = random.choice(list_of_plays)
        game.make_play(*play, self.player)
        player = "A" if self.player else "B"
        print("Player {}'s move: {} {}".format(player, *play))

class human_player(object):
   
    def __init__(self, player_a):
       
        self.player_a = player_a
        self.playername = "A" if player_a else "B"
    
    def make_play(self, game):
      
        while True:
            move = input("Player {}, make your move (start point end point):"\
                         .format(self.playername))
            move = move.split()
            try:
                move[0], move[1] = int(move[0]), int(move[1])
                if len(move) != 2: 
                    print("Error. Input must be of form start point, endpoint")
            
            except NameError: 
                print("Error. Input must be of form start point, endpoint")
                continue
            except IndexError: 
                print("Error. Input must be of form start point, endpoint")
                continue
            except ValueError:
                print("Error. Input must be of form start point, endpoint")
                continue
            move.sort() 
            valid_move = game.make_play(*move, self.player_a)
            if valid_move:
                return()
            print("Error. That move does not exist. Try again")
        
